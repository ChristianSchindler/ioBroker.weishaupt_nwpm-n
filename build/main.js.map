{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\r\n * Created with @iobroker/create-adapter v2.6.5\r\n */\r\n\r\n// The adapter-core module gives you access to the core ioBroker functions\r\n// you need to create an adapter\r\nimport * as utils from '@iobroker/adapter-core';\r\n\r\n// Load your modules here\r\nimport puppeteer from 'puppeteer';\r\nimport fs from 'fs';\r\nimport pdf from 'pdf-parse';\r\n\r\n// Types\r\ninterface Subpoint {\r\n    key: string;\r\n    value: string;\r\n}\r\n\r\ninterface Section {\r\n    header: string;\r\n    subpoints: Subpoint[];\r\n}\r\n\r\ninterface JSONOutput {\r\n    content: Section[];\r\n}\r\n\r\nclass WeishauptNwpmN extends utils.Adapter {\r\n    private taskInterval: NodeJS.Timeout | null = null;\r\n\r\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\r\n        super({\r\n            ...options,\r\n            name: 'weishaupt_nwpm-n',\r\n        });\r\n        this.on('ready', this.onReady.bind(this));\r\n        // this.on('stateChange', this.onStateChange.bind(this));\r\n        // this.on('objectChange', this.onObjectChange.bind(this));\r\n        // this.on('message', this.onMessage.bind(this));\r\n        this.on('unload', this.onUnload.bind(this));\r\n    }\r\n\r\n    private async scrapeAndSavePDF(url: string, outputPath: string = 'page.pdf'): Promise<void> {\r\n        const browser = await puppeteer.launch({\r\n            headless: true,\r\n            args: ['--lang=en']\r\n        });\r\n        const page = await browser.newPage();\r\n\r\n        await page.goto(url, {\r\n            waitUntil: 'networkidle2' // ensures the page is fully loaded\r\n        });\r\n\r\n        await page.pdf({\r\n            path: outputPath,\r\n            format: 'A4',\r\n            printBackground: true\r\n        });\r\n\r\n        this.log.info(`PDF saved to ${outputPath}`);\r\n        await browser.close();\r\n    }\r\n\r\n    async convertPDFtoJSON(pdfPath = 'page.pdf'): Promise<void> {\r\n\r\n        const dataBuffer = fs.readFileSync(pdfPath);\r\n\r\n        const data = await pdf(dataBuffer);\r\n\r\n        // Define the specific headers we're interested in\r\n        const validHeaders = [\r\n            'heating circuit 1',\r\n            'domestic hot water',\r\n            'solar storage',\r\n            'heat pump'\r\n        ];\r\n\r\n        // Specific parameters to be added under the 'general' category\r\n        const generalParams = [\r\n            'external temperature',\r\n            'flow temperature',\r\n            'heating request',\r\n            'performance level'\r\n        ];\r\n\r\n        // This will hold the final grouped JSON data\r\n        const jsonOutput: JSONOutput = {\r\n            content: []\r\n        };\r\n\r\n        // Temporary variables to track the current header and its key-value pairs\r\n        let currentHeader: any = null;\r\n        let currentSubpoints: { key: string; value: string; }[] = [];\r\n\r\n        // Create a 'general' section for the specified parameters\r\n        const generalSection = {\r\n            header: 'general',\r\n            subpoints: []\r\n        };\r\n\r\n        // Process the text content, split by new lines, and trim any unnecessary spaces\r\n        const lines = data.text\r\n            .split('\\n')\r\n            .map((line: string) => line.trim())\r\n            .filter((line: string | any[]) => line.length > 0);\r\n\r\n        // Loop through each line to categorize headers and subpoints\r\n        lines.forEach((line: string) => {\r\n            // Check if the line matches a valid header\r\n            if (validHeaders.includes(line)) {\r\n                // If a valid header is found, push the previous header's data (if any) to the JSON\r\n                if (currentHeader) {\r\n                    jsonOutput.content.push({\r\n                        header: currentHeader,\r\n                        subpoints: currentSubpoints\r\n                    });\r\n                }\r\n\r\n                // Start a new valid header and reset subpoints\r\n                currentHeader = line;\r\n                currentSubpoints = [];\r\n            } else if (generalParams.some(param => line.includes(param))) {\r\n                // If the line contains one of the general parameters, add it to the 'general' section\r\n                const match = line.match(/([a-zA-Z\\s]+)(\\d+(\\.\\d+)?)/);\r\n                if (match) {\r\n                    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n                    // @ts-expect-error\r\n                    generalSection.subpoints.push({\r\n                        key: match[1].trim(),\r\n                        value: match[2].trim()\r\n                    });\r\n                }\r\n            } else {\r\n                // Otherwise, this is a subpoint (e.g., \"temperature21.9\u00B0C\")\r\n                const match = line.match(/([a-zA-Z\\s]+)(\\d+(\\.\\d+)?)/);\r\n                if (match) {\r\n                    currentSubpoints.push({\r\n                        key: match[1].trim(),\r\n                        value: match[2].trim()\r\n                    });\r\n                }\r\n            }\r\n        });\r\n\r\n        // After the loop, add the 'general' section (if it has data)\r\n        if (generalSection.subpoints.length > 0) {\r\n            jsonOutput.content.push(generalSection);\r\n        }\r\n\r\n        // After the loop, add the last section (if any)\r\n        if (currentHeader) {\r\n            jsonOutput.content.push({\r\n                header: currentHeader,\r\n                subpoints: currentSubpoints\r\n            });\r\n        }\r\n\r\n        for (const category in jsonOutput.content) {\r\n            //console.debug(jsonOutput.content[category]);\r\n            this.log.info(jsonOutput.content[category]['header']);\r\n            await this.setObjectNotExistsAsync(jsonOutput.content[category]['header'], {\r\n                type: 'channel',\r\n                common: {\r\n                    name: jsonOutput.content[category]['header'],\r\n                },\r\n                native: {},\r\n            });\r\n\r\n            for (const value in jsonOutput.content[category]['subpoints']) {\r\n                this.log.info(jsonOutput.content[category]['subpoints'][value]['key']);\r\n                this.log.info(jsonOutput.content[category]['subpoints'][value]['value']);\r\n                await this.setObjectNotExistsAsync(jsonOutput.content[category]['header'] + '.' + jsonOutput.content[category]['subpoints'][value]['key'], {\r\n                    type: 'state',\r\n                    common: {\r\n                        role: 'text',\r\n                        name: jsonOutput.content[category]['subpoints'][value]['key'],\r\n                        type: 'string',\r\n                        read: true,\r\n                        write: false,\r\n                    },\r\n                    native: {},\r\n                });\r\n                this.setStateAsync(jsonOutput.content[category]['header'] + '.' + jsonOutput.content[category]['subpoints'][value]['key'], jsonOutput.content[category]['subpoints'][value]['value'])\r\n            }\r\n        }\r\n        return;\r\n    }\r\n\r\n    private async scrape_operating_data(): Promise<void> {\r\n        this.log.info('scrape');\r\n        await this.scrapeAndSavePDF(this.config.url + '/http/index/j_operatingdata.html');\r\n        await this.convertPDFtoJSON();\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * This is the main method with scrapes the website\r\n     */\r\n    private async scrapeNWPMN(): Promise<void> {\r\n        this.log.info('scrape');\r\n        await this.scrape_operating_data();\r\n    }\r\n\r\n    /**\r\n     * Is called when databases are connected and adapter received configuration.\r\n     */\r\n    private async onReady(): Promise<void> {\r\n        // Initialize your adapter here\r\n\r\n        // Reset the connection indicator during startup\r\n        this.setState('info.connection', false, true);\r\n\r\n        // The adapters config (in the instance object everything under the attribute \"native\") is accessible via\r\n        // this.config:\r\n        if (!this.config.url) {\r\n            this.log.error('please specify a URL');\r\n            return;\r\n        }\r\n        try {\r\n            new URL(this.config.url);\r\n            this.log.debug('config url: ' + this.config.url);\r\n        } catch (_) {\r\n            this.log.error('yor url is not valid: ' + this.config.url);\r\n            return;\r\n        }\r\n        this.taskInterval = setInterval(() => {\r\n            this.scrapeNWPMN();\r\n        }, this.config.interval * 1000);\r\n    }\r\n\r\n    /**\r\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\r\n     */\r\n    private onUnload(callback: () => void): void {\r\n        try {\r\n            if (this.taskInterval)\r\n                clearInterval(this.taskInterval);\r\n            callback();\r\n        } catch (e) {\r\n            callback();\r\n        }\r\n    }\r\n\r\n    // If you need to react to object changes, uncomment the following block and the corresponding line in the constructor.\r\n    // You also need to subscribe to the objects with `this.subscribeObjects`, similar to `this.subscribeStates`.\r\n    // /**\r\n    //  * Is called if a subscribed object changes\r\n    //  */\r\n    // private onObjectChange(id: string, obj: ioBroker.Object | null | undefined): void {\r\n    //     if (obj) {\r\n    //         // The object was changed\r\n    //         this.log.info(`object ${id} changed: ${JSON.stringify(obj)}`);\r\n    //     } else {\r\n    //         // The object was deleted\r\n    //         this.log.info(`object ${id} deleted`);\r\n    //     }\r\n    // }\r\n\r\n    // /**\r\n    // * Is called if a subscribed state changes\r\n    // */\r\n    // private onStateChange(id: string, state: ioBroker.State | null | undefined): void {\r\n    //     if (state) {\r\n    //         // The state was changed\r\n    //         this.log.info(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\r\n    //     } else {\r\n    //         // The state was deleted\r\n    //         this.log.info(`state ${id} deleted`);\r\n    //     }\r\n    // }\r\n\r\n    // If you need to accept messages in your adapter, uncomment the following block and the corresponding line in the constructor.\r\n    // /**\r\n    //  * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\r\n    //  * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\r\n    //  */\r\n    // private onMessage(obj: ioBroker.Message): void {\r\n    //     if (typeof obj === 'object' && obj.message) {\r\n    //         if (obj.command === 'send') {\r\n    //             // e.g. send email or pushover or whatever\r\n    //             this.log.info('send command');\r\n\r\n    //             // Send response in callback if required\r\n    //             if (obj.callback) this.sendTo(obj.from, obj.command, 'Message received', obj.callback);\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n}\r\n\r\nif (require.main !== module) {\r\n    // Export the constructor in compact mode\r\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new WeishauptNwpmN(options);\r\n} else {\r\n    // otherwise start the instance directly\r\n    (() => new WeishauptNwpmN())();\r\n}"],
  "mappings": "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",
  "names": ["puppeteer", "fs", "pdf"]
}
